#!/bin/bash
## domain-graphviz
## - reads from file domains creates png graphviz
## version 0.0.1 - initial
##################################################
#!/bin/bash
## commands (alias)
## - function command cli adapter
## version 0.0.6 - enable alias expansion for standalone use
##################################################
list-available-commands() { { local function_name ; function_name="${1}" ; local filter_include ; filter_include="${2}" ; }
 echo available commands:
 declare -f \
   | grep -e "^${function_name}" \
   | cut "-f1" "-d " \
   | grep -v -e "which" -e "for-each" -e "payload" -e "initialize" \
   | sed -e "s/${function_name}-//" \
   | xargs -I {} echo "- {}" \
   | sed  "1d" \
   | grep -e "${filter_include}"
}
shopt -s expand_aliases
alias read-command-args='
 list-available-commands ${FUNCNAME}
 echo "enter new command (or q to quite)"
 read command_args
'
alias parse-command-args='
 _car() { echo ${1} ; }
 _cdr() { echo ${@:2} ; }
 _command=$( _car ${command_args} )
 _args=$( _cdr ${command_args} )
'
alias commands='
 #test "${_command}" || { local _command ; _command="${1}" ; }
 #test "${_args}" || { local _args ; _args=${@:2} ; }
 { local _command ; _command="${1}" ; }
 { local _args ; _args=${@:2} ; }
 test ! "$( declare -f ${FUNCNAME}-${_command} )" && {
  {    
    test ! "${_command}" || {
     echo "${FUNCNAME} command \"${_command}\" not yet implemented"
    }
    list-available-commands ${FUNCNAME} 
  } 1>&2
 true
 } || {
  ${FUNCNAME}-${_command} ${_args}
 }
'
alias run-command='
 {
   commands
 } || true
'
alias handle-command-args='
 case ${command_args} in
   q|quit) {
    break  
   } ;; 
   *) { 
    parse-command-args
   } ;;
 esac
'
alias command-loop='
 while [ ! ]
 do
  run-command
  read-command-args
  handle-command-args
 done
'
##################################################
#!/bin/bash
## cecho
## - color echo
## version 0.1.0 - add color magenta as pink
##################################################
cecho-color() { #{ local candidate_color ; candidate_color="${1}" ; }
 case ${candidate_color} in
  pink) {
   echo 35
  } ;;
  blue) {
   echo 34 
  } ;;
  yellow) {
   echo 33
  } ;;
  green) {
   echo 32 
  } ;; 
  *) {
   echo 0
  } ;;
 esac
}
#-------------------------------------------------
cecho() { { local candidate_color ; candidate_color="${1}" ; local line ; line=${@:2} ; }
  test ! "${line}" || {
    echo -e "\e[$( ${FUNCNAME}-color )m ${line} \e[0m" 
  } 1>&2
}
##################################################
#!/bin/bash
## gt
## version 0.0.1 - initial
##################################################
gt() { { local car ; car="${1}" ; local cadr ; cadr="${2}" ; local cddr ; cddr=${@:3} ; }
  test "${cadr}" || { return ; }
  test ! ${car} -lt ${cadr} || { echo ${car} ${cadr} ; return ; }
  ${FUNCNAME} ${car} ${cddr}
}
##################################################
if [ ! ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
gt ${@}
##################################################
## generated by create-stub2.sh v0.1.2
## on Mon, 01 Jul 2019 12:15:43 +0900
## see <https://github.com/temptemp3/sh2>
##################################################
#!/bin/bash
## build
## version 0.0.2 - build single
##################################################
build() {
  local outfile
  outfile="${build}/$( basename ${0} .sh )"
  cecho green "building standalone ..."
  ################################################
  ## 1.  cleanup build (creates empty build dir)
  ## 1.  populate build (minimum: source script)
  ## 1.1 migrate script
  ################################################
  ## 1. cleanup build (creates empty build dir)
  ################################################
  cecho green "cleanup up build ..."
  cecho yellow $( test ! -d "${build}" || rm -rvf ${_} )
  cecho yellow $( mkdir -v "${build}" )
  cecho green "build clean"
  ################################################
  ## 1. populate build (minimum: source script)
  ################################################
  ## 1.1 migrate script
  ## - resolves '.' lines
  ## - keeps 'source' lines
  ################################################
  { # resolve source lines
    bash -vp ${0} true 2>&1 | 
    grep -v -e '^\s*[.]\s\+' 
  } | tee ${outfile}.sh
  ################################################
  cecho green "standalone built"
}
##################################################
## generated by create-stub2.sh v0.1.2
## on Sat, 04 May 2019 11:57:45 +0900
## see <https://github.com/temptemp3/sh2>
##################################################
strip-comments() {
  sed -e 's/#.*//' -
}
car() { echo "${1}" ; }
cdr() { echo "${@:2}" ; }
store-initialize() {
  store["generation"]=0
  store["domains_sha1sum"]=0
  store["domains"]=""
  declare -p store
}
store-persist() {
  store[domains_sha1sum]=${domains_sha1sum}
  store[generation]=$(( store[generation] + 1 ))
  store[domains]=${domains}
  declare -p store | tee domain-graphviz-store
}
store() {
  commands
}
generate-dot() {
  cat ${temp}-domains | gawk '
BEGIN {
  print "digraph G {"
  known_host["183.181.90.41"]="minoori (xserver)"
  known_host["8.8.8.8"]="dns.google"
  known_host["202.172.28.60"]="s59.coreserver.jp"
}
{
  if(!hash[$(2)]) {
    ip[++ip[0]]=$(2)
    hash[$(2)]=ip[0]
  }
  host[$(2)]=$(1) "\n" host[$(2)] 
  ++count[$(2)]
}
END {
  #print ip[0]
  for(i=1;i<ip[0];i++) {
    #if(known_host[ip[i]]) print ip[i] " " known_host[ip[i]] " (" count[ip[i]] ")" 
    #else print ip[i] " (" count[ip[i]] ")" 
    split(host[ip[i]],hosts)
    for(j=1;j<=length(hosts);j++) {
      print "\"" ip[i] "\" -> \"" hosts[j] "\" ; "
    }

  }
  print "}"
}
'
}
generate() {
  commands
}
domains-renew() {

  cecho green "performing batch nslookup ..."
  {
    lookup-domain-names \
    | tee domain-lookup \
    | tee ${temp}-domains
  } &>/dev/null
  cecho green "done performing batch nslookup"

  test -f "domain-lookup-last" || touch ${_}
  icdiff domain-lookup{,-last} || exit
  cp -v domain-lookup{,-last}

}
domains() {
  commands
}
temp-cleanup() {
  test ! "${temp}" || {
    cecho yellow "$( rm -rvf ${temp}* )"
  }
}
lookup-domain-names() {
  dig ${domains} \
  | grep -v -e '^\s*$' -e '^;' -e 'SOA' \
  | gawk '{print $(1) " " $(5)}' \
  | sort
}
domain-names() {
  cat domains \
  | strip-comments \
  | tr --delete '\r' \
  | xargs
}
initialize-domains() {
  domains=$( domain-names )
}
initialize-temp() {
  temp=$( mktemp )
}
initialize() {
  ${FUNCNAME}-domains
  ${FUNCNAME}-temp
}
domain-graphviz-build() {
  build=build
  build true
}
domain-graphviz-true() {
  true
}
domain-graphviz-main() {
  local temp
  local domains_sha1sum
  local domains

  test -f "domains" || return


  test -f domain-graphviz-store || touch ${_}
  test -d "generation" || mkdir -pv ${_}

  cecho green "initializing ..."
  initialize
  cecho green "done initializing"

  cecho green "loading store ..."
  cecho green "done loading store"

  cecho green "initializing store ..."  
  declare -p store 2>/dev/null || { 
    declare -A store
    store initialize
  }
  cecho green "done initializing store"  

  cecho green "renewing domains ..."
  domains renew
  cecho green "done renewing domains"

  domains_sha1sum=$( car $( sha1sum ${temp}-domains ) )
  test ! "${store[domains_sha1sum]}" = "${domains_sha1sum}" || {
    cecho yellow "domains unchanged"
    temp-cleanup
    return
  }

  cecho green "generating dot ..."
  generate dot | tee ${temp}-domains.dot &>/dev/null
  fdp -Tpng -o generation/${store[generation]}.png  ${temp}-domains.dot
  cecho green "done generating dot"

  cecho green "persisting store ..."
  store persist
  cecho green "done persiting store"
 
  temp-cleanup 
}
domain-graphviz() {
  commands
}
##################################################
if [ ! ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
domain-graphviz ${@}
##################################################
## generated by create-stub2.sh v0.1.2
## on Thu, 19 Sep 2019 13:56:19 +0900
## see <https://github.com/temptemp3/sh2>
##################################################
